%%-*- mode: erlang -*-
%% EMQ X R3.0 config mapping

{mapping, "hook.rabbit.host", "emqx_rabbit_hook.server", [
    {default, "127.0.0.1"},
    {datatype, string}
]}.
{mapping, "hook.rabbit.port", "emqx_rabbit_hook.server", [
    {default, 5672},
    {datatype, integer}
]}.
{mapping, "hook.rabbit.virtual_host", "emqx_rabbit_hook.server", [
    {default, "/"},
    {datatype, string}
]}.

{mapping, "hook.rabbit.username", "emqx_rabbit_hook.server", [
{default, "guest"},
{datatype, string}
]}.
{mapping, "hook.rabbit.password", "emqx_rabbit_hook.server", [
    {default, "guest"},
    {datatype, string}
]}.

{mapping, "hook.rabbit.heartbeat", "emqx_rabbit_hook.server", [
    {default, 10},
    {datatype, integer}
]}.
{mapping, "hook.rabbit.channel_max", "emqx_rabbit_hook.server", [
    {default, 2047},
    {datatype, integer}
]}.

{mapping, "hook.rabbit.frame_max", "emqx_rabbit_hook.server", [
    {default, 0},
    {datatype, integer}
]}.
{mapping, "hook.rabbit.connection_timeout", "emqx_rabbit_hook.server", [
    {default, 60000},
    {datatype, integer}
]}.

{translation, "emqx_rabbit_hook.server", fun(Conf) ->
[
    {pool_size, cuttlefish:conf_get("hook.rabbit.pool_size", Conf)},
    {host, cuttlefish:conf_get("hook.rabbit.host", Conf)},
    {port, cuttlefish:conf_get("hook.rabbit.port", Conf)},
    {virtual_host, cuttlefish:conf_get("hook.rabbit.virtual_host", Conf)},
    {username, cuttlefish:conf_get("hook.rabbit.username", Conf)},
    {password, cuttlefish:conf_get("hook.rabbit.password", Conf)},
    {heartbeat, cuttlefish:conf_get("hook.rabbit.heartbeat", Conf)},
    {channel_max, cuttlefish:conf_get("hook.rabbit.channel_max", Conf)},
    {frame_max, cuttlefish:conf_get("hook.rabbit.frame_max", Conf)},
    {connection_timeout, cuttlefish:conf_get("hook.rabbit.connection_timeout", Conf)}
]
end}.

%% =================== SSL configs ========================
{mapping, "hook.rabbit.ssl_enabled", "emqx_rabbit_hook.ssl_enabled", [
    {default, off},
    {datatype, flag}
]}.
{mapping, "hook.rabbit.ssl_cacertfile", "emqx_rabbit_hook.ssl_cacertfile", [
    {default, ""},
    {datatype, string}
]}.
{mapping, "hook.rabbit.ssl_certfile", "emqx_rabbit_hook.ssl_certfile", [
    {default, ""},
    {datatype, string}
]}.
{mapping, "hook.rabbit.ssl_keyfile", "emqx_rabbit_hook.ssl_keyfile", [
    {default, ""},
    {datatype, string}
]}.
{mapping, "hook.rabbit.ssl_verify_peer", "emqx_rabbit_hook.ssl_verify_peer", [
    {default, off},
    {datatype, flag}
]}.


%% =================== Pool Configs ========================

{mapping, "hook.rabbit.payload_encoding", "emqx_rabbit_hook.payload_encoding", [
{default, undefined},
{datatype, {enum, [bson, json]}}
]}.

{mapping, "hook.rabbit.auto_reconnect", "emqx_rabbit_hook.auto_reconnect", [
    {default, 1},
    {datatype, integer}
]}.

{mapping, "hook.rabbit.pool_size", "emqx_rabbit_hook.pool_size", [
    {default, 10},
    {datatype, integer}
]}.


%% ====================== Rule configs ========================

{mapping, "hook.rabbit.rule.client.connect.$name", "emqx_rabbit_hook.rules", [
{datatype, string}
]}.

{mapping, "hook.rabbit.rule.client.connack.$name", "emqx_rabbit_hook.rules", [
{datatype, string}
]}.

{mapping, "hook.rabbit.rule.client.connected.$name", "emqx_rabbit_hook.rules", [
{datatype, string}
]}.

{mapping, "hook.rabbit.rule.client.disconnected.$name", "emqx_rabbit_hook.rules", [
{datatype, string}
]}.

{mapping, "hook.rabbit.rule.client.subscribe.$name", "emqx_rabbit_hook.rules", [
{datatype, string}
]}.

{mapping, "hook.rabbit.rule.client.unsubscribe.$name", "emqx_rabbit_hook.rules", [
{datatype, string}
]}.

{mapping, "hook.rabbit.rule.session.subscribed.$name", "emqx_rabbit_hook.rules", [
{datatype, string}
]}.

{mapping, "hook.rabbit.rule.session.unsubscribed.$name", "emqx_rabbit_hook.rules", [
{datatype, string}
]}.

{mapping, "hook.rabbit.rule.session.terminated.$name", "emqx_rabbit_hook.rules", [
{datatype, string}
]}.

{mapping, "hook.rabbit.rule.message.publish.$name", "emqx_rabbit_hook.rules", [
{datatype, string}
]}.

{mapping, "hook.rabbit.rule.message.acked.$name", "emqx_rabbit_hook.rules", [
{datatype, string}
]}.

{mapping, "hook.rabbit.rule.message.delivered.$name", "emqx_rabbit_hook.rules", [
{datatype, string}
]}.


{translation, "emqx_rabbit_hook.rules", fun(Conf) ->
Hooks = cuttlefish_variable:filter_by_prefix("hook.rabbit.rule", Conf),
lists:map(
fun({[_, _, _, Name1,Name2, _], Val}) ->
{lists:concat([Name1, ".", Name2]), Val}
end, Hooks)
end}.